// Generated by ts-to-zod
import { z } from "zod";

export const adminSchema = z.object({
	id: z.string(),
	name: z.string(),
	updatedAt: z.string(),
	createdAt: z.string(),
	email: z.string(),
	resetPasswordToken: z.string().optional().nullable(),
	resetPasswordExpiration: z.string().optional().nullable(),
	salt: z.string().optional().nullable(),
	hash: z.string().optional().nullable(),
	loginAttempts: z.number().optional().nullable(),
	lockUntil: z.string().optional().nullable(),
	password: z.string().nullable(),
});

export const mediaSchema = z.object({
	id: z.string(),
	alt: z.string().optional().nullable(),
	object: z.string().optional().nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
	url: z.string().optional().nullable(),
	filename: z.string().optional().nullable(),
	mimeType: z.string().optional().nullable(),
	filesize: z.number().optional().nullable(),
	width: z.number().optional().nullable(),
	height: z.number().optional().nullable(),
	focalX: z.number().optional().nullable(),
	focalY: z.number().optional().nullable(),
});

export const attachmentSchema = z.object({
	id: z.string(),
	name: z.string().optional().nullable(),
	object: z.string().optional().nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
	url: z.string().optional().nullable(),
	filename: z.string().optional().nullable(),
	mimeType: z.string().optional().nullable(),
	filesize: z.number().optional().nullable(),
	width: z.number().optional().nullable(),
	height: z.number().optional().nullable(),
	focalX: z.number().optional().nullable(),
	focalY: z.number().optional().nullable(),
});

export const labPostSchema = z.object({
	id: z.string(),
	title: z.string(),
	category: z.string(),
	content: z.array(z.record(z.unknown())),
	attachments: z
		.array(
			z.object({
				file: z.union([z.string(), attachmentSchema]),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const boardSchema = z.object({
	id: z.string(),
	title: z.string(),
	name: z.string(),
	description: z.array(z.record(z.unknown())).optional().nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const payloadPreferenceSchema = z.object({
	id: z.string(),
	user: z.object({
		relationTo: z.literal("admins"),
		value: z.union([z.string(), adminSchema]),
	}),
	key: z.string().optional().nullable(),
	value: z
		.union([
			z.record(z.unknown()),
			z.array(z.unknown()),
			z.string(),
			z.number(),
			z.boolean(),
		])
		.optional()
		.nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const payloadMigrationSchema = z.object({
	id: z.string(),
	name: z.string().optional().nullable(),
	batch: z.number().optional().nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const websitePlaygroundSchema = z.object({
	id: z.string(),
	index: z.object({}).optional(),
	updatedAt: z.string().optional().nullable(),
	createdAt: z.string().optional().nullable(),
});

export const linkSchema = z.object({
	id: z.string(),
	sites: z
		.array(
			z.object({
				title: z.string(),
				path: z.string(),
				links: z
					.array(
						z.object({
							title: z.string(),
							url: z.string(),
							id: z.string().optional().nullable(),
						}),
					)
					.optional()
					.nullable(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	updatedAt: z.string().optional().nullable(),
	createdAt: z.string().optional().nullable(),
});

export const memberSchema = z.object({
	id: z.string(),
	name: z.string(),
	email: z.string().optional().nullable(),
	googleId: z.string().optional().nullable(),
	works: z
		.array(
			z.object({
				description: z.string().optional().nullable(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	profile: z.union([z.string(), mediaSchema]).optional().nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const boardBlockSchema = z.object({
	board: z.union([z.string(), boardSchema]),
	id: z.string().optional().nullable(),
	blockName: z.string().optional().nullable(),
	blockType: z.literal("board"),
});

export const postSchema = z.object({
	id: z.string(),
	title: z.string(),
	content: z.array(z.record(z.unknown())).optional().nullable(),
	author: z.union([z.string(), memberSchema]),
	board: z.union([z.string(), boardSchema]),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const commentSchema = z.object({
	id: z.string(),
	content: z.string().optional().nullable(),
	author: z.union([z.string(), memberSchema]),
	post: z.union([z.string(), postSchema]),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const websiteMainSchema = z.object({
	id: z.string(),
	about: z.object({
		summary: z.array(z.record(z.unknown())),
		description: z.array(z.record(z.unknown())),
	}),
	values: z
		.array(
			z.object({
				keyword: z.string().optional().nullable(),
				description: z.string().optional().nullable(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	methods: z.object({
		summary: z.string(),
		description: z.array(z.record(z.unknown())),
	}),
	sumamry: z.object({
		contents: z.array(z.record(z.unknown())),
	}),
	history: z
		.array(
			z.object({
				year: z.string(),
				title: z.string(),
				description: z.string().optional().nullable(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	board_members: z
		.array(
			z.object({
				member: z.union([z.string(), memberSchema]),
				position: z.string(),
				description: z
					.array(
						z.object({
							description: z.string().optional().nullable(),
							id: z.string().optional().nullable(),
						}),
					)
					.optional()
					.nullable(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	executive_members: z
		.array(
			z.object({
				member: z.union([z.string(), memberSchema]),
				position: z.string(),
				description: z
					.array(
						z.object({
							description: z.string().optional().nullable(),
							id: z.string().optional().nullable(),
						}),
					)
					.optional()
					.nullable(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	updatedAt: z.string().optional().nullable(),
	createdAt: z.string().optional().nullable(),
});

export const websiteLabSchema = z.object({
	id: z.string(),
	index: z.object({
		characteristics: z
			.array(
				z.object({
					title: z.string(),
					description: z.array(z.record(z.unknown())),
					id: z.string().optional().nullable(),
				}),
			)
			.optional()
			.nullable(),
		curriculums: z
			.array(
				z.object({
					icon: z.union([z.string(), mediaSchema]),
					name: z.string(),
					description: z.string(),
					courses: z
						.array(
							z.object({
								name: z.string(),
								description: z.string(),
								id: z.string().optional().nullable(),
							}),
						)
						.optional()
						.nullable(),
					id: z.string().optional().nullable(),
				}),
			)
			.optional()
			.nullable(),
		reviews: z
			.array(
				z.object({
					name: z.string(),
					description: z.array(z.record(z.unknown())),
					id: z.string().optional().nullable(),
				}),
			)
			.optional()
			.nullable(),
		recommend: z
			.array(
				z.object({
					image: z.union([z.string(), mediaSchema]).optional().nullable(),
					description: z.array(z.record(z.unknown())),
					id: z.string().optional().nullable(),
				}),
			)
			.optional()
			.nullable(),
		registration: z.object({
			due_date: z.string(),
			link: z.string(),
		}),
	}),
	materials: z
		.array(
			z.object({
				title: z.string(),
				description: z.array(z.record(z.unknown())),
				year: z.number(),
				publisher: z.string(),
				price: z.number(),
				link: z.string().optional().nullable(),
				image: z.union([z.string(), mediaSchema]),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	members: z
		.object({
			generations: z
				.array(
					z.object({
						index: z.number(),
						start: z.string(),
						end: z.string().optional().nullable(),
						id: z.string().optional().nullable(),
					}),
				)
				.optional()
				.nullable(),
			members: z
				.array(
					z.object({
						role: z.string(),
						generation: z.number(),
						member: z.union([z.string().nullable(), memberSchema]).optional(),
						works: z
							.array(
								z.object({
									description: z.string(),
									id: z.string().optional().nullable(),
								}),
							)
							.optional()
							.nullable(),
						id: z.string().optional().nullable(),
					}),
				)
				.optional()
				.nullable(),
		})
		.optional(),
	updatedAt: z.string().optional().nullable(),
	createdAt: z.string().optional().nullable(),
});

export const infoSchema = z.object({
	id: z.string(),
	name: z.string(),
	address: z.string(),
	registrationNumber: z.string().optional().nullable(),
	email: z.string(),
	manager: z.union([z.string(), memberSchema]),
	terms: z.string().optional().nullable(),
	privacy: z.string().optional().nullable(),
	bottom: z
		.array(
			z.object({
				name: z.string(),
				url: z.string(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	social: z
		.array(
			z.object({
				name: z.string(),
				url: z.string(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	external: z
		.array(
			z.object({
				name: z.string(),
				url: z.string(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	updatedAt: z.string().optional().nullable(),
	createdAt: z.string().optional().nullable(),
});

export const projectSchema = z.object({
	id: z.string(),
	name: z.string(),
	description: z.string().optional().nullable(),
	link: z.string().optional().nullable(),
	category: z.union([
		z.literal("labs"),
		z.literal("playground"),
		z.literal("outta"),
	]),
	admins: z
		.array(
			z.object({
				admin: z.union([z.string().nullable(), memberSchema]).optional(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	members: z
		.array(
			z.object({
				member: z.union([z.string().nullable(), memberSchema]).optional(),
				id: z.string().optional().nullable(),
			}),
		)
		.optional()
		.nullable(),
	blocks: z.array(boardBlockSchema).optional().nullable(),
	updatedAt: z.string(),
	createdAt: z.string(),
});

export const configSchema = z.object({
	collections: z.object({
		members: memberSchema,
		admins: adminSchema,
		media: mediaSchema,
		attachments: attachmentSchema,
		"lab-posts": labPostSchema,
		projects: projectSchema,
		boards: boardSchema,
		posts: postSchema,
		comments: commentSchema,
		"payload-preferences": payloadPreferenceSchema,
		"payload-migrations": payloadMigrationSchema,
	}),
	globals: z.object({
		"website-main": websiteMainSchema,
		"website-lab": websiteLabSchema,
		"website-playground": websitePlaygroundSchema,
		info: infoSchema,
		links: linkSchema,
	}),
});

export const payloadGeneratedTypesSchema = configSchema;
